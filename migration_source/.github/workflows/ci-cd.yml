name: Celora Wallet CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: celora_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/celora_test
        REDIS_URL: redis://localhost:6379/1
        JWT_SECRET: test-secret-key
        KMS_ENDPOINT: ""
        KMS_MASTER_KEY_ID: ""
      run: |
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV
        echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        python database_models.py
    
    - name: Run unit tests
      run: |
        python -m pytest test_wallet.py -v
    
    - name: Run integration tests
      run: |
        python -m pytest test_integration.py -v --tb=short
    
    - name: Run security tests
      run: |
        # Test for common security vulnerabilities
        pip install bandit safety
        bandit -r . -x ./test_*.py
        safety check
    
    - name: Code quality checks
      run: |
        pip install flake8 black isort mypy
        flake8 --max-line-length=120 --ignore=E203,W503 .
        black --check .
        isort --check-only .
        mypy . --ignore-missing-imports

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t celora-wallet:${{ github.sha }} -f Dockerfile .
    
    - name: Test Docker image
      run: |
        docker run --rm celora-wallet:${{ github.sha }} python -c "import celora_wallet; print('Import successful')"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
        # e.g., Render, Heroku, or AWS deployment

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here
        # Include database migrations, zero-downtime deployment

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
