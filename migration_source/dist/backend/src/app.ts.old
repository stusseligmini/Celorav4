import express, { Request, Response, NextFunction } from 'express';
import { PublicKey } from '@solana/web3.js';
import cors from 'cors';
import { Connection } from '@solana/web3.js';
import * as dotenv from 'dotenv';
import { cardRoutes } from './routes/cards';
import { transactionRoutes } from './routes/transactions';
import { errorHandler } from './middleware/errorHandler';


dotenv.config();

// Create Express app
export const app = express();

// Initialize Solana connection
export const connection = new Connection(
  process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
  'confirmed'
);

// Middleware
app.use(cors());
app.use(express.json());
const validateSolanaAddress = (req: Request, res: Response, next: NextFunction) => {
    const solanaAddress = req.body.solanaAddress || req.query.solanaAddress;

    if (!solanaAddress) {
        res.status(400).json({ error: 'Solana address is required' });
        return;
    }

    try {
        new PublicKey(solanaAddress);
        next();
    } catch (error) {
        res.status(400).json({ error: 'Invalid Solana address' });
        return;
    }
};

app.use('/api', validateSolanaAddress);

// Routes
app.use('/api/cards', cardRoutes);
app.use('/api/transactions', transactionRoutes);

// Error handling
app.use(errorHandler);
