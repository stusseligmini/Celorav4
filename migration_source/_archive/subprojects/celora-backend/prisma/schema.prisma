generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String?   @unique
  passwordHash    String
  
  // Email verification
  emailVerified               Boolean   @default(false)
  emailVerificationToken      String?   @unique
  emailVerificationExpires    DateTime?
  verifiedAt                  DateTime?
  
  // Password reset
  passwordResetToken          String?   @unique
  passwordResetExpires        DateTime?
  passwordChangedAt           DateTime?
  
  // Security and tokens
  tokenVersion                Int       @default(0)
  twoFactorSecret             String?
  twoFactorEnabled            Boolean   @default(false)
  backupCodes                 String?   // JSON string instead of array
  
  // Profile information
  firstName       String
  lastName        String
  phone           String?
  dateOfBirth     DateTime?
  profileImage    String?
  
  // Account status and KYC
  isActive        Boolean   @default(true)
  role            String    @default("user") // user, admin, moderator
  kycStatus       String    @default("PENDING") // PENDING, APPROVED, REJECTED, IN_REVIEW
  kycLevel        Int       @default(0) // 0=none, 1=basic, 2=intermediate, 3=advanced
  kycDocuments    String?   // JSON string for document references
  kycSubmittedAt  DateTime?
  kycVerifiedAt   DateTime?
  
  // Login tracking
  lastLoginAt     DateTime?
  lastLoginIP     String?
  loginCount      Int       @default(0)
  
  // Security icons and preferences
  securityIcons   String?   // JSON string
  settings        String?   // JSON string for user preferences
  metadata        String?   // JSON string for additional metadata
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  // Relations
  wallets         Wallet[]
  virtualCards    VirtualCard[]
  transactions    Transaction[]
  loginHistory    LoginHistory[]
  securityEvents  SecurityEvent[]
  supportTickets  SupportTicket[]
  apiKeys         ApiKey[]
  
  @@map("users")
}

model Wallet {
  id            String    @id @default(cuid())
  userId        String
  name          String?
  type          String    @default("SOLANA") // SOLANA, BITCOIN, ETHEREUM
  address       String    @unique
  publicKey     String?
  encryptedPrivateKey String?
  network       String    @default("devnet") // mainnet, devnet, testnet
  currency      String    @default("SOL")
  balance       Float     @default(0.0)
  isActive      Boolean   @default(true)
  isPrimary     Boolean   @default(false)
  nickname      String?
  
  // Security and metadata
  derivationPath String?  // HD wallet derivation path
  metadata      String?   // JSON string
  lastSyncedAt  DateTime?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  
  @@map("wallets")
}

model VirtualCard {
  id            String    @id @default(cuid())
  userId        String
  name          String?
  cardNumber    String    @unique // Encrypted/masked
  expiryDate    String    // MM/YY format
  expiryMonth   Int
  expiryYear    Int
  cvv           String    // Encrypted
  cardType      String    @default("DEBIT") // DEBIT, CREDIT
  status        String    @default("PENDING") // PENDING, ACTIVE, BLOCKED, EXPIRED, FROZEN, CANCELLED
  isActive      Boolean   @default(true)
  
  // Card holder info
  holderName    String
  
  // Limits and controls
  spendingLimit Float     @default(1000.0)
  dailyLimit    Float     @default(1000.0)
  monthlyLimit  Float     @default(5000.0)
  perTransactionLimit Float @default(500.0)
  
  // Usage tracking
  balance       Float     @default(0.0)
  dailySpent    Float     @default(0.0)
  monthlySpent  Float     @default(0.0)
  totalSpent    Float     @default(0.0)
  
  // Card provider info
  providerCardId String?  // External provider's card ID
  providerData  String?   // JSON string for provider-specific data
  
  // Security
  pin           String?   // Encrypted PIN
  blocked       Boolean   @default(false)
  blockedReason String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  activatedAt   DateTime?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  
  @@map("virtual_cards")
}

model Transaction {
  id            String    @id @default(cuid())
  userId        String
  walletId      String?
  virtualCardId String?
  type          String    // SEND, RECEIVE, SWAP, CARD_PAYMENT, TRANSFER, DEPOSIT, WITHDRAWAL, CARD_LOAD, QR_PAYMENT
  status        String    @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED, PROCESSING
  
  // Transaction amounts
  amount        Float     
  currency      String
  feeAmount     Float?
  feeCurrency   String?
  
  // Addresses and references
  fromAddress   String?
  toAddress     String?
  fromAccount   String?   // Internal account reference
  toAccount     String?   // Internal account reference
  
  // Blockchain specific
  hash          String?   @unique // Blockchain transaction hash
  blockNumber   String?
  confirmations Int       @default(0)
  gasUsed       String?
  gasPrice      String?
  network       String?   // mainnet, devnet, testnet
  
  // Card transaction specific
  merchantName      String?
  merchantCategory  String?
  cardLast4         String?
  authCode          String?
  
  // Risk and compliance
  riskScore         Float?   // 0.0 to 1.0
  riskFlags         String?  // JSON string for flags
  amlStatus         String?  // clear, flagged, under_review
  complianceNotes   String?
  
  // Transaction details
  description   String?
  notes         String?
  tags          String?   // JSON string for tags
  metadata      String?   // JSON string for additional data
  
  // External references
  externalId    String?  // External system transaction ID
  referenceId   String?  // User-provided reference
  
  // IP and device tracking
  ipAddress     String?
  userAgent     String?
  deviceId      String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet        Wallet?   @relation(fields: [walletId], references: [id], onDelete: SetNull)
  virtualCard   VirtualCard? @relation(fields: [virtualCardId], references: [id], onDelete: SetNull)
  
  @@map("transactions")
}

model LoginHistory {
  id            String   @id @default(cuid())
  userId        String
  success       Boolean
  ipAddress     String
  userAgent     String?
  location      String?  // Derived from IP
  device        String?  // Parsed from user agent
  failureReason String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("login_history")
}

model SecurityEvent {
  id          String   @id @default(cuid())
  userId      String?
  eventType   String   // login_failure, suspicious_activity, password_change, etc.
  severity    String   // low, medium, high, critical
  description String
  ipAddress   String?
  userAgent   String?
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  
  // Event data
  eventData   String?  // JSON string
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("security_events")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String
  status      String   @default("open") // open, in_progress, resolved, closed
  priority    String   @default("normal") // low, normal, high, urgent
  category    String?  // account, transaction, technical, etc.
  
  // Communication
  lastResponse DateTime?
  responseCount Int     @default(0)
  
  // Assignment
  assignedTo   String?
  assignedAt   DateTime?
  
  // Resolution
  resolvedAt   DateTime?
  resolution   String?
  satisfaction Int?     // 1-5 rating
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     SupportMessage[]
  
  @@map("support_tickets")
}

model SupportMessage {
  id         String   @id @default(cuid())
  ticketId   String
  message    String
  isFromUser Boolean  @default(true)
  staffId    String?  // Staff member ID who replied
  
  // Attachments
  attachments String?  // JSON string for attachments
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@map("support_messages")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  keyHash     String   @unique // Hashed API key
  permissions String?  // JSON string for permissions array
  active      Boolean  @default(true)
  
  // Usage tracking
  lastUsed    DateTime?
  usageCount  Int      @default(0)
  rateLimit   Int      @default(1000) // Requests per hour
  
  // Expiration
  expiresAt   DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   // JSON string
  description String?
  category    String?  // security, features, limits, etc.
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_config")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // create, update, delete, login, transaction, etc.
  resource    String   // user, wallet, transaction, etc.
  resourceId  String?
  oldValues   String?  // JSON string
  newValues   String?  // JSON string
  ipAddress   String?
  userAgent   String?
  performedBy String?  // Staff member who performed the action
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}
